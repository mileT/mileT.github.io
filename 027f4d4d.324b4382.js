(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{145:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),d=function(e){var n=a.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},p=function(e){var n=d(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=d(t),f=r,b=p["".concat(l,".").concat(f)]||p[f]||s[f]||o;return t?a.a.createElement(b,i({ref:n},u,{components:t})):a.a.createElement(b,i({ref:n},u))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},91:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var r=t(1),a=t(6),o=(t(0),t(145)),l={id:"leetcode234",title:"Palindrome Linked List"},i={id:"leetcode234",title:"Palindrome Linked List",description:"## Question",source:"@site/docs/leetcode234.md",permalink:"/docs/leetcode234",editUrl:"http://localhost:3000/docs/leetcode234.md"},c=[{value:"Question",id:"question",children:[{value:"Example 1:",id:"example-1",children:[]},{value:"Example 2:",id:"example-2",children:[]},{value:"Follow up:",id:"follow-up",children:[]}]},{value:"Solution",id:"solution",children:[]}],u={rightToc:c};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"question"},"Question"),Object(o.b)("p",null,"Given a singly linked list, determin if it is a palindrome."),Object(o.b)("h3",{id:"example-1"},"Example 1:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"Input: 1->2\nOutput: false\n")),Object(o.b)("h3",{id:"example-2"},"Example 2:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"Input: 1->2->2->1\nOutput: true\n")),Object(o.b)("h3",{id:"follow-up"},"Follow up:"),Object(o.b)("p",null,"Could you do it in O(n) time and O(1) space?"),Object(o.b)("h2",{id:"solution"},"Solution"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public boolean isPalindrome(ListNode head) {\n        ListNode fast = head, slow = head;\n        while(fast != null && fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        if(fast != null) {\n            slow = slow.next;\n        }\n\n        firstHalfHead = head;\n        secondHalfHead = reverse(slow);\n        \n        while(firstHalfHead != null) {\n            if(firstHalfHead.val != secondHalfHead.val) {\n                return false;\n            }\n            firstHalfHead = firstHalfHead.next;\n            secondHalfHead = secondHalfHead.next;\n        }\n        return true;\n    }\n\n    public ListNode reverse(ListNode head) {\n        ListNode prev = null;\n        while(head != null) {\n            ListNode next = head.next;\n            head.next = prev;\n            prev = head;\n            head = next;\n        }\n        return prev;\n    }\n}\n")))}d.isMDXComponent=!0}}]);