(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{109:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(1),o=r(6),a=(r(0),r(145)),i={id:"6day1",title:"Invert Binary Tree"},c={id:"6day1",title:"Invert Binary Tree",description:"# Description",source:"@site/docs/leetcode226.md",permalink:"/docs/6day1",editUrl:"http://localhost:3000/docs/leetcode226.md"},l=[{value:"Approach #1 Recursive Way",id:"approach-1-recursive-way",children:[{value:"code",id:"code",children:[]},{value:"Complexity Analysis",id:"complexity-analysis",children:[]}]},{value:"Approach #2 Iterative Way",id:"approach-2-iterative-way",children:[]}],u={rightToc:l};function p(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"description"},"Description"),Object(a.b)("p",null,"Invert a binary tree."),Object(a.b)("h1",{id:"solution"},"Solution"),Object(a.b)("h2",{id:"approach-1-recursive-way"},"Approach ","#","1 Recursive Way"),Object(a.b)("h3",{id:"code"},"code"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if(root == null) {\n            return null;\n        }\n\n        TreeNode l = invertTree(root.right);\n        TreeNode r = invertTree(root.left)\n        root.left = l;\n        root.right = r;\n        return root;\n    }\n}\n")),Object(a.b)("h3",{id:"complexity-analysis"},"Complexity Analysis"),Object(a.b)("p",null,"Time complexity is ",Object(a.b)("inlineCode",{parentName:"p"},"O(n)"),", where ",Object(a.b)("inlineCode",{parentName:"p"},"n")," is the number of the nodes in the tree. We cannot do better than this, since at the very least we have to visit each node to invert it.\nSpace complexity is `O(h)', where 'h' is the height of the tree."),Object(a.b)("h2",{id:"approach-2-iterative-way"},"Approach ","#","2 Iterative Way"),Object(a.b)("p",null,"We can create a queue to store nodes whose left and right child have not been swapped yet. Initially, only the root is the queue. As long as the queue is not empty, remove the next node from queue, swap its children, and add the children to the queue. Null nodes are not added to the queue. Evenually, the queue will be empty and all the children swapped, and we return the original root."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"public TreeNode invertTreee(TreeNode root) {\n    if(root == null) return null;\n    Queue<TreeNode> queue = new LinkedList<TreeNode>();\n    queue.add(root);\n    while(!queue.isEmpty()) {\n        TreeNode current = queue.poll();\n        TreeNode temp = current.left;\n        current.left = current.right;\n        current.right = tem;\n        if(current.left != null) queue.add(current.left);\n        if(current.right != null) queue.add(current.right);\n    }\n    return root;\n}\n\n")))}p.isMDXComponent=!0},145:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return b}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),p=function(e){var t=o.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c({},t,{},e)),r},d=function(e){var t=p(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(r),h=n,b=d["".concat(i,".").concat(h)]||d[h]||s[h]||a;return r?o.a.createElement(b,c({ref:t},u,{components:r})):o.a.createElement(b,c({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}h.displayName="MDXCreateElement"}}]);