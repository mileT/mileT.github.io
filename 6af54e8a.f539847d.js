(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(1),r=t(6),i=(t(0),t(144)),c={id:"leetcode3",title:"3. Longest Substring Without Repeating Characters"},o={id:"leetcode3",title:"3. Longest Substring Without Repeating Characters",description:"## Description",source:"@site/docs/leetcode3.md",permalink:"/docs/leetcode3",editUrl:"http://localhost:3000/docs/leetcode3.md",sidebar:"someSidebar",previous:{title:"1. Two Sum",permalink:"/docs/leetcode1"},next:{title:"5. Longest Palindromic Substring",permalink:"/docs/leetcode5"}},l=[{value:"Description",id:"description",children:[{value:"Example 1:",id:"example-1",children:[]},{value:"Example 2:",id:"example-2",children:[]},{value:"Example 3:",id:"example-3",children:[]},{value:"Example 4:",id:"example-4",children:[]},{value:"Constraints:",id:"constraints",children:[]}]},{value:"Solution",id:"solution",children:[{value:"Appoach 1: Brute Force",id:"appoach-1-brute-force",children:[]},{value:"Approach 2 Sliding Window",id:"approach-2-sliding-window",children:[]},{value:"Approach3: Sliding Window Optimized",id:"approach3-sliding-window-optimized",children:[]}]}],s={rightToc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"Given a string ",Object(i.b)("inlineCode",{parentName:"p"},"s"),", find the length of the longest substring without repeating characters."),Object(i.b)("h3",{id:"example-1"},"Example 1:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'Input: s = "abcabcbb"\nOutput: 3\nExplanation: The answer is "abc", with the length of 3.\n')),Object(i.b)("h3",{id:"example-2"},"Example 2:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'Input: s = "bbbbb"\nOutput: 1\nExplanation: The answer is "b", with the length of 1.\n')),Object(i.b)("h3",{id:"example-3"},"Example 3:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'Input: s = "pwwkew"\nOutput: 3\nExplanation: The answer is "wke", with the length of 3.\nNotice that the answer must be a substring, "pwke" is a subsequence and not a substring.\n')),Object(i.b)("h3",{id:"example-4"},"Example 4:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'Input: s = ""\nOutput: 0\n')),Object(i.b)("h3",{id:"constraints"},"Constraints:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.\n")),Object(i.b)("h2",{id:"solution"},"Solution"),Object(i.b)("h3",{id:"appoach-1-brute-force"},"Appoach 1: Brute Force"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j <= n; j++) {\n                if(allUnique(s, i, j)) ans = Math.max(ans, j - i);\n            }\n        }\n        return ans;\n    }\n    public boolean allUnique(String s, int start, int end) {\n        Set<Character> set = new HashSet<>();\n        for(int i = start; i < end; i++) {\n            Character char = s.charAt(i);\n            if(set.contains(char)) return false;\n            set.add(char);\n        }\n        return true;\n    }\n}\n")),Object(i.b)("p",null,"For this solution, the util fuction ",Object(i.b)("inlineCode",{parentName:"p"},"allUnique"),", in the edge case of last character of ",Object(i.b)("inlineCode",{parentName:"p"},"s"),", ",Object(i.b)("inlineCode",{parentName:"p"},"end")," points at the next of last character. "),Object(i.b)("h3",{id:"approach-2-sliding-window"},"Approach 2 Sliding Window"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.lenght();\n        Set<Character> mySet = new HashSet<>();\n        int ans = 0, i = 0, j = 0;\n        while(i < n && j < n) {\n            if(!mySet.contains(s.charAt(j))){\n                set.add(s.charAt(j++));\n                ans = Math.max(ans, j - i);\n            } else {\n                set.remove(s.charAt(i++));\n            }\n        }\n        return ans;\n    }\n}\n")),Object(i.b)("h3",{id:"approach3-sliding-window-optimized"},"Approach3: Sliding Window Optimized"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public class Solution {\n    int n = s.length(), ans = 0;\n    Map<Character, Integer> myMap = new HashMap<>();\n    for(int j = 0, i = 0; j < n; j++) {\n        if(myMap.containsKey(s.charAt(j))) {\n            i = Math.max(map.get(s.charAt(j)), i);\n        }\n        ans = Math.max(ans, j - i + 1);\n        map.put(s.charAt(j), j + 1);\n    }\n    return ans;\n}\n")),Object(i.b)("p",null,"If we assuming ASCII 128 for characters in String ",Object(i.b)("inlineCode",{parentName:"p"},"s")," we can use ",Object(i.b)("inlineCode",{parentName:"p"},"int[]")," to replace HashMap"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"public int lengthOfLongestSubstring(String s) {\n    int n = s.length(), ans = 0;\n    int[] index = new int[128];\n    for(int j = 0, i = 0; j < n; j++) {\n        i = Math.max(index[s.charAt(j)], i);\n        ans = Math.max(ans, j - i + 1);\n        index[s.charAt(j)] = j + 1;\n    }\n} \n")))}p.isMDXComponent=!0},144:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return h}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o({},n,{},e)),t},b=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,h=b["".concat(c,".").concat(d)]||b[d]||u[d]||i;return t?r.a.createElement(h,o({ref:n},s,{components:t})):r.a.createElement(h,o({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);