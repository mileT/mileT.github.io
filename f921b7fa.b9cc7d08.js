(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{140:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return l}));var r=t(1),o=t(6),i=(t(0),t(145)),a={id:"day29",title:"Course Schedule"},u={id:"day29",title:"Course Schedule",description:"## Description",source:"@site/docs/leetcode207.md",permalink:"/docs/day29",editUrl:"http://localhost:3000/docs/leetcode207.md"},s=[{value:"Description",id:"description",children:[{value:"Example 1:",id:"example-1",children:[]},{value:"Example 2:",id:"example-2",children:[]}]},{value:"Solution",id:"solution",children:[{value:"BFS based topological sorting",id:"bfs-based-topological-sorting",children:[]}]}],c={rightToc:s};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1."),Object(i.b)("p",null,"Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: ","[0,1]"),Object(i.b)("p",null,"Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?"),Object(i.b)("h3",{id:"example-1"},"Example 1:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0. So it is possible.\n")),Object(i.b)("h3",{id:"example-2"},"Example 2:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \n             To take course 1 you should have finished course 0, and to take course 0 you should\n             also have finished course 1. So it is impossible.\n")),Object(i.b)("h2",{id:"solution"},"Solution"),Object(i.b)("h3",{id:"bfs-based-topological-sorting"},"BFS based topological sorting"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        ArrayList[] graph = new ArrayList[numCourses];\n        int[] degree = new int[numCourses];\n        Queue queue = new LinkedList();\n        int count = 0;\n\n        for(int i = 0; i < numCourses; i++) {\n            graph[i] = new ArrayList();\n        }\n\n        for(int i = 0; i < prerequisites.length; i++) {\n            degree[prerequisites[i][1]]++;\n            graph[prerequisites[i][0]].add(prerequisites[i][1])\n        }\n\n        for(int i = 0; i < degree.length; i++>) {\n            if(degree[i] == 0) {\n                queue.add(i);\n                count++;\n            }\n        }\n\n        while(queue.size() != 0) {\n            int course = (int)queue.poll();\n            for(int i = 0; i < graph[course].size(); i++) {\n                int pointer = (int)graph[course].get(i);\n                degree[pointer]--;\n                if(degree[pointer] == 0) {\n                    queue.add(pointer);\n                    count++;\n                }\n            }\n        }\n\n        if(count == numCourses) return true;\n         else return false;\n    }\n}\n\n")))}l.isMDXComponent=!0},145:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),l=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):u({},n,{},e)),t},p=function(e){var n=l(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(t),b=r,f=p["".concat(a,".").concat(b)]||p[b]||d[b]||i;return t?o.a.createElement(f,u({ref:n},c,{components:t})):o.a.createElement(f,u({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=b;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,a[1]=u;for(var c=2;c<i;c++)a[c]=t[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);