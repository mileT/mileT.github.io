(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return a})),n.d(t,"default",(function(){return u}));var i=n(1),r=n(6),s=(n(0),n(144)),o={id:"leetcode364",title:"Nested List Weight Sum"},l={id:"leetcode364",title:"Nested List Weight Sum",description:"[Leetcode 364](https://www.cnblogs.com/grandyang/p/5615583.html)",source:"@site/docs/leetcode364.md",permalink:"/docs/leetcode364",editUrl:"http://localhost:3000/docs/leetcode364.md"},a=[{value:"Solution 1",id:"solution-1",children:[{value:"Solution 2",id:"solution-2",children:[]},{value:"Solution 3 BFS",id:"solution-3-bfs",children:[]},{value:"Weighted",id:"weighted",children:[]}]}],c={rightToc:a};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,Object(s.b)("a",Object(i.a)({parentName:"p"},{href:"https://www.cnblogs.com/grandyang/p/5615583.html"}),"Leetcode 364"),"\n",Object(s.b)("a",Object(i.a)({parentName:"p"},{href:"https://cheonhyangzhang.gitbooks.io/leetcode-solutions/content/364-nested-list-weight-sum-ii.html"}),"link"),"\nGiven a nested list of integers, return the sum of all integers in the list weighted by their depth."),Object(s.b)("p",null,"Each element is either an integer, or a list -- whose elements may also be integers or other lists."),Object(s.b)("p",null,"Different from the previous question where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight."),Object(s.b)("p",null,"Example 1:"),Object(s.b)("p",null,"Input: [","[1,1]",",2,","[1,1]","]\nOutput: 8\nExplanation: Four 1's at depth 1, one 2 at depth 2.\nExample 2:"),Object(s.b)("p",null,"Input: [1,[4,","[6]","]]\nOutput: 17\nExplanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1",Object(s.b)("em",{parentName:"p"},"3 + 4"),"2 + 6*1 = 17."),Object(s.b)("h2",{id:"solution-1"},"Solution 1"),Object(s.b)("pre",null,Object(s.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"public interface NestedInteger {\n    public boolean isInteger();\n    public Integer getInteger();\n    public List<NestedInteger> getList();\n}\npublic class Solution {\n    public int depthSumInverse(List<NestedInteger> nestedList) {\n        int unweighted = 0, weighted = 0;\n        while(!nestedList.isEmpty()) {\n            List<NestedInteger> newList = new LinkedList<NestedInteger> ();\n            for(NestedInteger ni : nestedList) {\n                if(ni.isInteger()) {\n                    unweighted += ni.getInteger();\n                } else {\n                    newList.addAll(ni.getList());\n                }\n            }\n            weighted += unweighted;\n            nestedList = newList;\n        }\n        return weighted;\n\n    }\n  \n}\n")),Object(s.b)("h3",{id:"solution-2"},"Solution 2"),Object(s.b)("pre",null,Object(s.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"public class Soution {\n    public int depthSumInverse(List<NestedInteger> nestedList) {\n        int height = getHeight(nestedList);\n        return calSum(nestedList, height);\n    }\n\n    private int getHeight(List<NestedInteger> nestedList) {\n        int height = 1;\n        for(NestedInteger ni: nestedList) {\n            if(!ni.isInteger()) {\n                int temp = getHeight(ni.getList());\n                height = Math.max(height, temp + 1);\n            }\n        }\n        return height;\n    }\n\n    private int calSum(List<NestedInteger> nestedList, int level) {\n        int sum = 0;\n        for(NestedInteger ni: nestedList) {\n            if(ni.isInteger()) {\n                sum += level * ni.getInteger();\n            } else {\n                sum += calSum(ni.getList(), level - 1);\n            }\n        }\n        return sum;\n    }\n}\n")),Object(s.b)("h3",{id:"solution-3-bfs"},"Solution 3 BFS"),Object(s.b)("pre",null,Object(s.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int depthSumInverse(List<NestedInteger> nestedList) {\n        Queue<List<NestedInteger>> q = new LinkedList<List<NestedInteger>>();\n        q.add(nestedList);\n        Stack<Integer> stack = new Stack<Integer>();\n        while(!q.isEmpty()) {\n            int size = q.size();\n            int sum = 0;\n            for(int i = 0; i < size; i++) {\n                List<NestedInteger> node = q.poll();\n                for(NestedInteger ni: node) {\n                    if(ni.isInteger()) {\n                        sum += ni.getInteger();\n                    } else {\n                        q.add(ni.getList());\n                    }\n                }\n            }\n            stack.push(sum);\n        }\n        int level = 1;\n        int result = 0;\n        while(!stack.isEmpty()) {\n            result += level * stack.pop();\n            level++;\n        }\n        return result;\n    }\n}\n")),Object(s.b)("h3",{id:"weighted"},"Weighted"),Object(s.b)("pre",null,Object(s.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),"public class Solution {\n    public int depthSumInverse(List<NestedInteger> nestedList) {\n        int unweighted = 0, weighted = 0;\n        while(!nestedList.isEmpty()) {\n            List<NestedInteger> newList = new LinkedList<NestedInteger>();\n            for(NestedInteger ni : nestedList) {\n                if(ni.isInteger()) {\n                    unweighted += ni.getInteger();\n                } else {\n                    newList.addAll(ni.getList());\n                }\n            }\n            weighted += unweighted;\n            nestedList = newList;\n        }\n        return weighted;\n    }\n}\n")))}u.isMDXComponent=!0},144:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var i=n(0),r=n.n(i);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},d=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),g=i,h=d["".concat(o,".").concat(g)]||d[g]||p[g]||s;return n?r.a.createElement(h,l({ref:t},c,{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=g;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);