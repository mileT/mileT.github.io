(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{104:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return s}));var r=t(1),i=t(6),o=(t(0),t(144)),a={id:"day30",title:"K Closest Points to Origin"},l={id:"day30",title:"K Closest Points to Origin",description:"## Description",source:"@site/docs/leetcode973.md",permalink:"/docs/day30",editUrl:"http://localhost:3000/docs/leetcode973.md"},p=[{value:"Description",id:"description",children:[]},{value:"Solution",id:"solution",children:[{value:"use heap to store <code>K</code> smallest points",id:"use-heap-to-store-k-smallest-points",children:[]},{value:"Use Quick select",id:"use-quick-select",children:[]}]}],c={rightToc:p};function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"We have a list of ",Object(o.b)("inlineCode",{parentName:"p"},"points")," on the plane. Find the ",Object(o.b)("inlineCode",{parentName:"p"},"K")," cloest points to the origin ",Object(o.b)("inlineCode",{parentName:"p"},"(0,0)"),".\n(Here, the distance between two points on a plane is the Euclidean distance.)\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)"),Object(o.b)("h4",{id:"note"},"Note:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"1 <= K <= points.length <= 10000")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"-10000 < points[i][0] < 10000")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"-10000 < points[i][1] < 10000"))),Object(o.b)("h2",{id:"solution"},"Solution"),Object(o.b)("h3",{id:"use-heap-to-store-k-smallest-points"},"use heap to store ",Object(o.b)("inlineCode",{parentName:"h3"},"K")," smallest points"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int[][] kClosest(int[][] points, int K) {\n       PriorityQueue<int[]> pq = new PriorityQueue<int[]>((p1, p2) -> p2[0]*p2[0] + p2[1]*p2[1] - p1[1]*p1[1] -p1[0]*p1[0]);\n        for(int[] p : points){\n            pq.offer(p);\n            if(pq.size() > K) {\n                pq.poll();\n            }\n        }\n\n        int[][] result = new int[K][2];\n        while(K > 0) {\n            result[--K] = pq.poll();\n        }\n        \n        return result;\n     \n    }\n}\n")),Object(o.b)("h3",{id:"use-quick-select"},"Use Quick select"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public int[][] kClosest(int[][] points, int K) {\n        int len = points.length, l = 0, r = len - 1;\n        while(l <= r) {\n            int mid = helper(points, l, r);\n            if(mid == K) break;\n            if(mid < K) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return Arrays.copyOfRange(points, 0, K);\n    }\n\n    // Quick sort/select partition function\n    private int helper(int[][] A, int l, int r) {\n        int[] pivot = A[l];\n        while(l < r) {\n            while( l < r && compare(A[r], pivot) >= 0) r--;\n            A[l] = A[r];\n            while( l < r && compare(A[l], pivout) <= 0) l++;\n            A[r] = A[l];\n        }\n        A[l] = pivout;\n        return l;\n    }\n    // util function for compare distance for two points\n    private int compare(int[] p1, int[] p2) {\n        return p1[0]*p1[0] + p1[1]*p1[1] - p2[0]*p2[0] - p2[1][1];\n    }\n}\n")))}s.isMDXComponent=!0},144:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),s=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},u=function(e){var n=s(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,f=u["".concat(a,".").concat(d)]||u[d]||b[d]||o;return t?i.a.createElement(f,l({ref:n},c,{components:t})):i.a.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);